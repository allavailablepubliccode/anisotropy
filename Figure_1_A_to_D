% This code reproduces Figure 1 A through D
clear;clc;close all;rng(0);
disp('generating isotropic data, ~1 min...')

% specify states and parameters
%--------------------------------------------------------------------------
N                       = 512;  	% number of time points

% model states, phi (x.p), and theta (x.t)
%--------------------------------------------------------------------------
x.p                     =  1+1/256;	% initialise phi at different values
x.p_xp1                 =  1+1/128;
x.p_xm1                 =  1+1/64;
x.p_yp1                 =  1+1/32;
x.p_ym1                 =  1+1/16;
x.p_xp1_yp1             =  1+1/8;
x.p_xp1_ym1             =  1+1/4;
x.p_xm1_yp1             =  1+1/2;
x.p_xm1_ym1             =  1+1;

x.t                     =  1+1;   	% initialise theta at different values
x.t_xp1                 =  1+1/2;
x.t_xm1                 =  1+1/4;
x.t_yp1                 =  1+1/8;
x.t_ym1                 =  1+1/16;
x.t_xp1_yp1             =  1+1/32;
x.t_xp1_ym1             =  1+1/64;
x.t_xm1_yp1             =  1+1/128;
x.t_xm1_ym1             =  1+1/256;

% model parameters - delta = 0 (wave equation)
%--------------------------------------------------------------------------
P.del                   = 0;

% observation function (phi - to generate timeseries)
%--------------------------------------------------------------------------
g                       = @(x,v,P) real(normalize([x.p;x.p_xp1;x.p_xm1;...
    x.p_yp1;x.p_ym1;x.p_xp1_yp1;x.p_xp1_ym1;x.p_xm1_yp1;x.p_xm1_ym1]));

% equations of motion
%--------------------------------------------------------------------------
f                       = @(x,v,P) [real(normalize([x.t;x.t_xp1;...
    x.t_xm1;x.t_yp1;x.t_ym1;x.t_xp1_yp1;x.t_xp1_ym1;x.t_xm1_yp1;...
    x.t_xm1_ym1]));real(normalize([(x.p_xp1-2*x.p+x.p_xm1)+...
    x.p.^(2*P.del).*((x.p_yp1-2*x.p+x.p_ym1)+P.del.*0.5*(x.p_yp1-...
    x.p_ym1).^2./x.p);(x.p_xp1-2*x.p+x.p_xm1)+x.p_xp1.^(2*P.del).*((...
    x.p_xp1_yp1-2*x.p_xp1+x.p_xp1_ym1)+P.del.*0.5*(x.p_xp1_yp1-...
    x.p_xp1_ym1).^2./x.p_xp1);(x.p_xm1-2*x.p+x.p_xp1)+x.p_xm1.^(2*P.del...
    ).*((x.p_xm1_yp1-2*x.p_xm1+x.p_xm1_ym1)+P.del.*0.5*(x.p_xm1_yp1-...
    x.p_xm1_ym1).^2./x.p_xm1);(x.p_xp1_yp1-2*x.p_yp1+x.p_xm1_yp1)+...
    x.p_yp1.^(2*P.del).*((x.p_xp1_yp1-2*x.p_xp1+x.p_xp1_ym1)+P.del.*(...
    x.p_yp1-x.p).^2./x.p_yp1);(x.p_xp1_ym1-2*x.p_ym1+x.p_xm1_ym1)+...
    x.p_ym1.^(2*P.del).*((x.p_xp1_ym1-2*x.p_xp1+x.p_xp1_yp1)+P.del.*(...
    x.p-x.p_ym1).^2./x.p_ym1);(x.p_xp1_yp1-2*x.p_yp1+x.p_xm1_yp1)+...
    x.p_xp1_yp1.^(2*P.del).*((x.p_xp1_yp1-2*x.p_xp1+x.p_xp1_ym1)+...
    P.del.*(x.p_xp1_yp1-x.p_xp1).^2./x.p_xp1_yp1);(x.p_xp1_ym1-2*...
    x.p_ym1+x.p_xm1_ym1)+x.p_xp1_ym1.^(2*P.del).*((x.p_xp1_ym1-2*...
    x.p_xp1+x.p_xp1_yp1)+P.del.*(x.p_xp1-x.p_xp1_ym1).^2./x.p_xp1_ym1);...
    (x.p_xm1_yp1-2*x.p_yp1+x.p_xp1_yp1)+x.p_xm1_yp1.^(2*P.del).*((...
    x.p_xm1_yp1-2*x.p_xm1+x.p_xm1_ym1)+P.del.*(x.p_xm1_yp1-x.p_xm1...
    ).^2./x.p_xm1_yp1);(x.p_xm1_ym1-2*x.p_ym1+x.p_xp1_ym1)+...
    x.p_xm1_ym1.^(2*P.del).*((x.p_xm1_ym1-2*x.p_xm1+x.p_xm1_yp1)+...
    P.del.*(x.p_xm1-x.p_xm1_ym1).^2./x.p_xm1_ym1)]))];

% causes or exogenous input (zero perturbation)
%--------------------------------------------------------------------------
U                       = zeros(1,N);

% first level state space model
%--------------------------------------------------------------------------
M(1).x                  = x;      	% initial states
M(1).f                  = f;     	% equations of motion
M(1).g                  = g;        % observation mapping
M(1).pE                 = P;       	% model parameters
M(1).V                  = exp(16); 	% precision of observation noise
M(1).W                  = exp(16);	% precision of state noise

% second level causes or exogenous forcing term
%--------------------------------------------------------------------------
M(2).v                  = 0;       	% initial causes
M(2).V                  = exp(16); 	% precision of exogenous causes

% create isotropic data with known parameters (P)
%==========================================================================
DEM_iso                 = spm_DEM_generate(M,U,P);

% change delta to non-zero value for anisotropic case
%--------------------------------------------------------------------------
P.del                   = -3;
M(1).pE                 = P;

% create anisotropic data with known parameters (P)
%==========================================================================
disp('generating anisotropic data, ~1 min...')
DEM_aniso               = spm_DEM_generate(M,U,P);

% remove initial time points to suppress artefacts
%--------------------------------------------------------------------------
DEM_iso.Y               = DEM_iso.Y(:,50:end);
DEM_aniso.Y             = DEM_aniso.Y(:,50:end);

% initialization of priors over parameters
%--------------------------------------------------------------------------
DEM_aniso.M(1).pE.del   = 0;

% set prior variance
%--------------------------------------------------------------------------
pC.del                  = 1;
DEM_iso.M(1).pC         = diag(spm_vec(pC))*16;
DEM_aniso.M(1).pC       = diag(spm_vec(pC))*16;

% log precision of sampling noise - use precise beliefs about time
%--------------------------------------------------------------------------
DEM_iso.M(1).V          = exp(8);
DEM_aniso.M(1).V        = exp(8);
DEM_iso.M(1).W          = exp(8);
DEM_aniso.M(1).W        = exp(8);

% number of iterations
%--------------------------------------------------------------------------
DEM_iso.M(1).E.nD       = 2; 
DEM_aniso.M(1).E.nD  	= 2;

% order of equations of motion
%--------------------------------------------------------------------------
DEM_iso.M(1).E.linear   = 2;
DEM_aniso.M(1).E.linear	= 2;

% Inversion using generalised filtering
%--------------------------------------------------------------------------
disp('inverting isotropic model, ~10 mins...')
LAP_iso                 = spm_DEM(DEM_iso);     % isotropic
disp('inverting anisotropic model, ~10 mins...')
LAP_ani                 = spm_DEM(DEM_aniso);   % anisotropic
disp('printing results')

% use Bayesian model reduction to test different hypotheses
%--------------------------------------------------------------------------
model{1}                = 'isotropic';
model{2}                = 'anisotropic';

% apply precise shrinkage prior to deviation from isotropy
%--------------------------------------------------------------------------
PC{1}                   = pC; PC{1}.del = 0;
PC{2}                   = pC;

% evaluate the evidence for these new models or prior constraints for the
% model inversion performed on isotropic data
%--------------------------------------------------------------------------
qE                      = LAP_iso.qP.P{1};
qC                      = LAP_iso.qP.C;
pE                      = LAP_iso.M(1).pE;
pC                      = LAP_iso.M(1).pC;
clear Fiso
for m = 1:numel(PC)
    rC                  = diag(spm_vec(PC{m}));
    F_iso(m)            = spm_log_evidence(qE,qC,pE,pC,pE,rC);
end

% evaluate the evidence for these new models or prior constraints for the
% model inversion performed on anisotropic data
%--------------------------------------------------------------------------
qE                      = LAP_ani.qP.P{1};
qC                      = LAP_ani.qP.C;
pE                      = LAP_ani.M(1).pE;
pC                      = LAP_ani.M(1).pC;
clear Fani
for m = 1:numel(PC)
    rC                  = diag(spm_vec(PC{m}));
    F_ani(m)            = spm_log_evidence(qE,qC,pE,pC,pE,rC);
end

% report marginal log likelihood or evidence
%--------------------------------------------------------------------------
F_iso                   = F_iso - min(F_iso);
F_ani                   = F_ani - min(F_ani);

% report associated probabilities
%--------------------------------------------------------------------------
p_iso                   = spm_softmax(F_iso(:));
p_ani                   = spm_softmax(F_ani(:));

% plot results
%--------------------------------------------------------------------------
dt                      = 1/16;
ts                      = dt:dt:size(LAP_ani.Y,2)*dt;
x                       = repmat(cos(ts),[9,1]);
y                       = repmat(sin(ts),[9,1]);

figure
subplot(3,2,1)
plot(LAP_iso.Y'.*x',LAP_iso.Y'.*y')
title('A')
subplot(3,2,2)
plot(LAP_ani.Y'.*x',LAP_ani.Y'.*y')
title('B')
subplot(3,2,3)
bar(F_iso)
title('C')
subplot(3,2,4)
bar(p_iso)
title('C_prob')
subplot(3,2,5)
bar(F_ani)
title('D')
subplot(3,2,6)
bar(p_ani)
title('D_prob')
